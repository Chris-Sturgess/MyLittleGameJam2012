package Scripts{	import Scripts.*;	import flash.events.Event;	import flash.display.MovieClip;	import flash.display.Stage;	public class Boss extends MovieClip	{		var stageRef:Stage;		var commands:Array;		var currentMove:int;		var notFiring:Boolean = true;		var fireCount:int;		var side:int = 1;		var health = 10000;		var engine:Engine;		var lasers:Array;				public function Boss(myStage:Stage, myEngine:Engine, laserArray:Array) {			addEventListener(Event.ENTER_FRAME, loop);			stageRef = myStage;			engine = myEngine;			lasers = laserArray;		}				public function loop(event:Event)		{			if (commands[currentMove] == null)			{				currentMove = 0;			}			if (notFiring)			{				moveChar();				currentMove ++;				checkForHits();			}		}				public function moveChar()		{			switch (commands[currentMove])			{				case 'U':				this.y -= 10;				break;				case 'D':				this.y += 10;				break;				case 'F':				notFiring = false;				this.Inner.gotoAndStop(2);				addEventListener(Event.ENTER_FRAME, fire);				break;			}			while (this.y - this.height / 2 < 0)			{				this.y ++;			}			while (this.y + this.height / 2 > stageRef.stageHeight)			{				this.y --;			}		}				public function fire(event:Event)		{			var bullet:MidLaser;			var front:FrontLaser;			if (fireCount >= 60)			{				fireCount = 0;				Inner.Attack.gotoAndPlay(16);			}			if (Inner.Attack.currentFrame >= 29)			{				Inner.Attack.gotoAndStop(1);				Inner.gotoAndStop(1);				notFiring = true;				removeEventListener(Event.ENTER_FRAME, fire);			}			else if (Inner.Attack.currentFrame == 15)			{				if (fireCount == 0)				{					front = new FrontLaser(side * -1, stageRef, lasers);					front.x = this.x - this.width;					front.y = this.y - this.height / 2;					front.height = this.height / 39.15 * 60;					this.parent.addChild(front);					lasers.push(front);				}				else				{					bullet = new MidLaser(side * -1, stageRef, lasers);					bullet.x = this.x - this.width;					bullet.y = this.y - this.height / 2;					bullet.height = this.height;					this.parent.addChild(bullet);					lasers.push(bullet);				}				fireCount ++;							}		}				public function takeHit(amount:int, type:String)		{			if (type == "fire")			{				health -= amount;			}		}				public function die()		{			removeEventListener(Event.ENTER_FRAME, loop);			removeEventListener(Event.ENTER_FRAME, fire);			engine.bossDead = true;			this.parent.removeChild(this);		}				public function checkForHits()		{			if (health <= 0)			{				die();			}		}	}	}